// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  username      String
  full_name     String
  email         String   @unique
  password      String
  photo_profile String?
  bio           String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  created_by    Int?
  updated_by    Int?

  createdThreads Thread[] @relation("CreatedThreads")
  updatedThreads Thread[] @relation("UpdatedThreads")

  createdReplies Reply[] @relation("CreatedReplies")
  updatedReplies Reply[] @relation("UpdatedReplies")

  createdLikes Like[] @relation("CreatedLikes")
  updatedLikes Like[] @relation("UpdatedLikes")

  following Following[] @relation("FollowingUser")
  followers Following[] @relation("FollowerUser")

  replies Reply[]
  threads Thread[]
  likes   Like[]
}

model Thread {
  id                Int      @id @default(autoincrement())
  content           String
  image             String?
  number_of_replies Int?
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  created_by        Int?
  updated_by        Int?

  user          User? @relation(fields: [created_by], references: [id], name: "CreatedThreads")
  updatedByUser User? @relation(fields: [updated_by], references: [id], name: "UpdatedThreads")

  replies Reply[]
  likes   Like[]
  userId  Int?
  User    User?   @relation(fields: [userId], references: [id])
}

model Reply {
  id         Int      @id @default(autoincrement())
  user_id    Int
  thread_id  Int
  image      String?
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by Int?
  updated_by Int?

  user      User   @relation(fields: [user_id], references: [id])
  thread    Thread @relation(fields: [thread_id], references: [id])
  createdBy User?  @relation(fields: [created_by], references: [id], name: "CreatedReplies")
  updatedBy User?  @relation(fields: [updated_by], references: [id], name: "UpdatedReplies")
}

model Like {
  id         Int      @id @default(autoincrement())
  user_id    Int
  thread_id  Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  created_by Int?
  updated_by Int?

  user      User   @relation(fields: [user_id], references: [id])
  thread    Thread @relation(fields: [thread_id], references: [id])
  createdBy User?  @relation(fields: [created_by], references: [id], name: "CreatedLikes")
  updatedBy User?  @relation(fields: [updated_by], references: [id], name: "UpdatedLikes")
}

model Following {
  id           Int      @id @default(autoincrement())
  following_id Int
  follower_id  Int
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  following User @relation("FollowingUser", fields: [following_id], references: [id])
  follower  User @relation("FollowerUser", fields: [follower_id], references: [id])
}
